Descrição
    Um interpretador de JavaScript assíncrono orientado	a eventos, desenvolvido	para lidar com aplicações de rede escaláveis. Isso significa que o Node fica na espera de eventos serem	disparados	para executar uma ação.

Características
    - Não é multithread, como o Java, PHP e o C#;
    - 


Conceitos Iniciais e Ferramentas Importantes
    npm
        Gerenciador de Pacottes Node.js. https://www.npmjs.com/

    express
        O Express é um framework para aplicativo da web do Node.js mínimo e flexível que fornece um conjunto robusto de recursos para aplicativos web e móvel. Em resumo, ele cria um servidor para rodar nossa aplicação e disponibiliza uma porta para receber requisições. https://expressjs.com/pt-br/

    JWT express
        
    marko.js
        Marko é uma biblioteca de interface do usuário amigável e super rápida que facilita a representação de sua interface do usuário usando uma sintaxe semelhante ao HTML.

    nodemon
        nodemon é uma ferramenta que ajuda a desenvolver aplicativos baseados em node.js reiniciando automaticamente o aplicativo de nó quando são detectadas alterações de arquivo no diretório.

    package.json
        É o coração de qualquer projeto Node.js. Ele registra metadados importantes sobre um projeto que são necessários antes da publicação no NPM e também define atributos funcionais de um projeto que o npm usa para instalar dependências, executar scripts e identificar o ponto de entrada para nosso pacote.

    package-lock.json
        É gerado automaticamente para qualquer operação em que npm modifique a árvore node_modules ou package.json. Ele descreve a árvore exata que foi gerada, de modo que as instalações subsequentes possam gerar árvores idênticas, independentemente das atualizações de dependência intermediárias.

    Prettier
        Extensão VSCode para formatação automárica do Node.js

    ReqBin
        ReqBin é uma ferramenta de teste de API online para APIs REST e SOAP. Teste os endpoints da API fazendo solicitações de API diretamente do seu navegador. Teste as respostas da API com validadores JSON e XML integrados. Teste de carga sua API com centenas de conexões simultâneas simuladas. Gere snippets de código para estruturas de teste de automação de API. Compartilhe e discuta suas solicitações de API online.

    Thunder Client
        O Thunder Client é uma extensão de cliente de API Rest leve para Visual Studio Code, criada à mão por Ranga Vadhineni com design simples e limpo. 

Por que Node.js?
    - Netflix: Escalabilidade horizontal de acesso.
    - GoDaddy: Por conta da comunidade que trabalha nos módulos oferecidos pelo sistema da linguagem ser mais “vibrante”. Isso aponta uma das principais vantagens do Node.js: seu sistema de módulos comunitário.
    - Nasa: Engenheiros	da NASA	utilizaram Node.js para	criar uma API que integra três bases de dados em um	só,	baseado	em um serviço de Cloud. Isso permitiu que dados	gerados, como por exemplo, em missões extraveiculares, fossem acessados de maneira muito mais eficaz.

    - Alta eficiência em servidores web;
    - Performance e	simplicidade no	desenvolvimento;
    - 


Primeiros Códigos
    //Sem express
    const http = require('http');

    const hostname = '127.0.0.1';
    const port = 3000;

    const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/plain');
    res.end('Hello World');
    });

    server.listen(port, hostname, () => {
    console.log(`Server running at http://${hostname}:${port}/`);
    });

    //Com express
    const express = require('express')
    const app = express()
    const port = 3000

    app.get('/', (req, res) => {
        res.send('Hello World!')
    })

    app.listen(port, () => {
        console.log(`Example app listening on port ${port}`)
    })

Comandos npm
    npm init
        Executar dentro da pasta raiz do projeto para iniciar um projeto Node.js. Gera o package.json com todas as informações do projeto. Permite editar as características do seu projeto.
    npm init -y
        Executar dentro da pasta raiz do projeto para iniciar um projeto Node.js. Gera o package.json com todas as informações do projeto. "-y" é de "yes", ou seja, dá um bypass nas propriedades do seu projeto.
    npm i
        Instalar todos os pacotes necessários e criar a pasta node_modules.
    npm i express
        Instalar o Express.
    npm install -g nodemon
        Instalar o nodemon de forma global.    
    npm install --save-dev nodemon OU npm i -D nodemon
        Instalar o nodemon apenas no ambiente de dev.
    npm run dev
        Executar o script salvo no package.json com o nome de dev, exemplo "nodemon index".
    npm run start
        Executar o script salvo no package.json com o nome de start, exemplo "node index". 

Comandos node
    node -v
        Versão do Node.js
    node index.js
        Executar na raiz do projeto para rodar nosso index.js

Comandos nodemon
    nodemon [your node app]
    nodemon -h
    nodemon ./server.js localhost 8080
    nodemon --inspect ./server.js 80

###############
- um endpoint sempre deve ter o mesmo nome que a tabela aonde ele vai ser armazenado

- para trabalhar com ids dos arrays, sempre fazer o id - 1

- CORS - https://www.youtube.com/watch?v=PdG2sn5nMqQ&list=PLzFYWfRVHp5L7d8IR--fNmNSTZ-iIAsI-&index=6

- length sempre considera o último item de uma lista + 1
    - numeros.filter(Boolean) =>> traz o valor correto de itens